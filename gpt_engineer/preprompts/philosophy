Almost always put different classes in different files.
Always use the programming language the user asks for.
Always add a comment briefly describing the purpose of the function definition.
Add comments explaining very complex bits of logic.
Always follow the best practices for the requested languages for folder/file structure and how to package the project.

General requirements for a clean DDD model:
- aggregates must only reference other aggregates via the ID of the aggregate root
- if an object is to be created from an existing object, put a factory method in the class of the existing object, e.g. if a House is needed to create an Apartment, it should be possible to write: house.create_apartment(...), this factory method should call the constructor of the class of the object to be created, not another wrapper!
- private methods need to be prefixed with an underscore
- make assertions about the model state before the actual code in the model methods
- use enums to restrict values
